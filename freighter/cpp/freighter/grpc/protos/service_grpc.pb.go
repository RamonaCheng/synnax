// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: freighter/cpp/freighter/grpc/protos/service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires grpc-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UnaryMessageService_Exec_FullMethodName = "/test.UnaryMessageService/Exec"
)

// UnaryMessageServiceClient is the client API for UnaryMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnaryMessageServiceClient interface {
	Exec(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type unaryMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnaryMessageServiceClient(cc grpc.ClientConnInterface) UnaryMessageServiceClient {
	return &unaryMessageServiceClient{cc}
}

func (c *unaryMessageServiceClient) Exec(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, UnaryMessageService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryMessageServiceServer is the server API for UnaryMessageService service.
// All implementations should embed UnimplementedUnaryMessageServiceServer
// for forward compatibility
type UnaryMessageServiceServer interface {
	Exec(context.Context, *Message) (*Message, error)
}

// UnimplementedUnaryMessageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUnaryMessageServiceServer struct {
}

func (UnimplementedUnaryMessageServiceServer) Exec(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeUnaryMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnaryMessageServiceServer will
// result in compilation errors.
type UnsafeUnaryMessageServiceServer interface {
	mustEmbedUnimplementedUnaryMessageServiceServer()
}

func RegisterUnaryMessageServiceServer(s grpc.ServiceRegistrar, srv UnaryMessageServiceServer) {
	s.RegisterService(&UnaryMessageService_ServiceDesc, srv)
}

func _UnaryMessageService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryMessageServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnaryMessageService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryMessageServiceServer).Exec(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// UnaryMessageService_ServiceDesc is the grpc.ServiceDesc for UnaryMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnaryMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.UnaryMessageService",
	HandlerType: (*UnaryMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _UnaryMessageService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freighter/cpp/freighter/grpc/protos/service.proto",
}

const (
	StreamMessageService_Exec_FullMethodName = "/test.StreamMessageService/Exec"
)

// StreamMessageServiceClient is the client API for StreamMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamMessageServiceClient interface {
	Exec(ctx context.Context, opts ...grpc.CallOption) (StreamMessageService_ExecClient, error)
}

type streamMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamMessageServiceClient(cc grpc.ClientConnInterface) StreamMessageServiceClient {
	return &streamMessageServiceClient{cc}
}

func (c *streamMessageServiceClient) Exec(ctx context.Context, opts ...grpc.CallOption) (StreamMessageService_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamMessageService_ServiceDesc.Streams[0], StreamMessageService_Exec_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamMessageServiceExecClient{stream}
	return x, nil
}

type StreamMessageService_ExecClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type streamMessageServiceExecClient struct {
	grpc.ClientStream
}

func (x *streamMessageServiceExecClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamMessageServiceExecClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamMessageServiceServer is the server API for StreamMessageService service.
// All implementations should embed UnimplementedStreamMessageServiceServer
// for forward compatibility
type StreamMessageServiceServer interface {
	Exec(StreamMessageService_ExecServer) error
}

// UnimplementedStreamMessageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamMessageServiceServer struct {
}

func (UnimplementedStreamMessageServiceServer) Exec(StreamMessageService_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeStreamMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMessageServiceServer will
// result in compilation errors.
type UnsafeStreamMessageServiceServer interface {
	mustEmbedUnimplementedStreamMessageServiceServer()
}

func RegisterStreamMessageServiceServer(s grpc.ServiceRegistrar, srv StreamMessageServiceServer) {
	s.RegisterService(&StreamMessageService_ServiceDesc, srv)
}

func _StreamMessageService_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamMessageServiceServer).Exec(&streamMessageServiceExecServer{stream})
}

type StreamMessageService_ExecServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type streamMessageServiceExecServer struct {
	grpc.ServerStream
}

func (x *streamMessageServiceExecServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamMessageServiceExecServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamMessageService_ServiceDesc is the grpc.ServiceDesc for StreamMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.StreamMessageService",
	HandlerType: (*StreamMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _StreamMessageService_Exec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "freighter/cpp/freighter/grpc/protos/service.proto",
}
